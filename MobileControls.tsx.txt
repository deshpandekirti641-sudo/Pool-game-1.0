'use client'

import { useState, useRef, useCallback } from 'react'
import { Vector3 } from 'three'
import type { PoolGameLogic } from './usePoolGame'

interface MobileControlsProps {
  gameLogic: PoolGameLogic
}

export function MobileControls({ gameLogic }: MobileControlsProps): JSX.Element {
  const [aimDirection, setAimDirection] = useState(new Vector3(1, 0, 0))
  const [power, setPower] = useState(0)
  const [isDragging, setIsDragging] = useState(false)
  const joystickRef = useRef<HTMLDivElement>(null)
  const powerRef = useRef<HTMLDivElement>(null)

  const handleJoystickStart = useCallback((e: React.TouchEvent | React.MouseEvent) => {
    if (!gameLogic.isPlayerTurn) return
    setIsDragging(true)
    e.preventDefault()
  }, [gameLogic.isPlayerTurn])

  const handleJoystickMove = useCallback((e: React.TouchEvent | React.MouseEvent) => {
    if (!isDragging || !joystickRef.current) return
    
    const rect = joystickRef.current.getBoundingClientRect()
    const centerX = rect.left + rect.width / 2
    const centerY = rect.top + rect.height / 2
    
    let clientX: number, clientY: number
    if ('touches' in e) {
      clientX = e.touches[0].clientX
      clientY = e.touches[0].clientY
    } else {
      clientX = e.clientX
      clientY = e.clientY
    }
    
    const deltaX = clientX - centerX
    const deltaY = clientY - centerY
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)
    const maxDistance = rect.width / 2
    
    if (distance > 0) {
      const normalizedX = deltaX / distance
      const normalizedZ = deltaY / distance
      setAimDirection(new Vector3(normalizedX, 0, normalizedZ))
    }
    
    e.preventDefault()
  }, [isDragging])

  const handleJoystickEnd = useCallback(() => {
    setIsDragging(false)
  }, [])

  const handlePowerChange = useCallback((newPower: number) => {
    setPower(Math.max(0, Math.min(10, newPower)))
  }, [])

  const handleShoot = useCallback(() => {
    if (power > 0 && gameLogic.isPlayerTurn) {
      gameLogic.shootCueBall(aimDirection, power)
      setPower(0)
    }
  }, [power, aimDirection, gameLogic])

  const isMobile = typeof window !== 'undefined' && window.innerWidth < 768

  if (!isMobile || !gameLogic.isPlayerTurn) {
    return <></>
  }

  return (
    <div className="fixed inset-0 pointer-events-none z-40">
      {/* Aiming Joystick */}
      <div className="absolute bottom-6 left-6 pointer-events-auto">
        <div className="text-white text-xs mb-2 text-center font-bold">AIM</div>
        <div 
          ref={joystickRef}
          className="w-20 h-20 rounded-full bg-gray-800 bg-opacity-80 border-2 border-white flex items-center justify-center relative"
          onTouchStart={handleJoystickStart}
          onTouchMove={handleJoystickMove}
          onTouchEnd={handleJoystickEnd}
          onMouseDown={handleJoystickStart}
          onMouseMove={handleJoystickMove}
          onMouseUp={handleJoystickEnd}
        >
          <div 
            className="w-6 h-6 rounded-full bg-red-500 absolute transition-all duration-75"
            style={{
              transform: isDragging 
                ? `translate(${aimDirection.x * 20}px, ${aimDirection.z * 20}px)`
                : 'translate(0px, 0px)'
            }}
          />
        </div>
      </div>

      {/* Power Slider */}
      <div className="absolute bottom-6 right-6 pointer-events-auto">
        <div className="text-white text-xs mb-2 text-center font-bold">POWER</div>
        <div className="w-6 h-32 bg-gray-800 bg-opacity-80 border-2 border-white rounded-full relative">
          <input
            type="range"
            min="0"
            max="10"
            step="0.5"
            value={power}
            onChange={(e) => handlePowerChange(parseFloat(e.target.value))}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            style={{ writingMode: 'bt-lr' }}
          />
          <div 
            className="absolute bottom-0 left-0 w-full bg-gradient-to-t from-red-500 to-yellow-400 rounded-full transition-all duration-200"
            style={{ height: `${(power / 10) * 100}%` }}
          />
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 rounded-full bg-white border-2 border-gray-400" />
        </div>
        <div className="text-white text-xs mt-1 text-center">{power.toFixed(1)}</div>
      </div>

      {/* Shoot Button */}
      <div className="absolute bottom-32 right-1/2 transform translate-x-1/2 pointer-events-auto">
        <button
          onClick={handleShoot}
          disabled={power === 0}
          className={`px-8 py-4 rounded-full font-bold text-white border-2 transition-all duration-200 ${
            power > 0
              ? 'bg-green-600 border-green-400 hover:bg-green-700 active:scale-95 shadow-lg'
              : 'bg-gray-600 border-gray-400 cursor-not-allowed opacity-50'
          }`}
        >
          SHOOT
        </button>
      </div>

      {/* Current Player Indicator */}
      <div className="absolute top-6 left-1/2 transform -translate-x-1/2 pointer-events-none">
        <div className="bg-black bg-opacity-80 text-white px-4 py-2 rounded-lg border border-gray-600">
          <div className="text-center">
            <div className="text-lg font-bold">Player {gameLogic.currentPlayer}</div>
            <div className="text-sm opacity-75">Your Turn</div>
          </div>
        </div>
      </div>
    </div>
  )
}