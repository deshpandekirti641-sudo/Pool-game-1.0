'use client'

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { 
  Trophy, 
  Settings, 
  Volume2, 
  VolumeX, 
  Shield,
  Timer,
  Users,
  Zap,
  Star,
  Crown,
  Target,
  Gamepad2
} from 'lucide-react';

// Import components
import { AuthModal } from './auth/AuthModal';
import { TournamentDashboard } from './tournament/TournamentDashboard';
import { AdminDashboard } from './admin/AdminDashboard';
import { WalletManager } from './wallet/WalletManager';
import { PoolGame } from '../app/components/PoolGame';

// Import utilities
import { TournamentManager, User, Match } from '@/lib/tournament';
import { AudioManager } from '@/lib/audioManager';

interface TournamentAppProps {}

interface HeroSectionProps {
  onGetStarted: () => void;
  onAdminAccess: () => void;
  audioManager: AudioManager;
}

interface FeatureCardProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  highlight?: boolean;
}

function FeatureCard({ icon, title, description, highlight }: FeatureCardProps): JSX.Element {
  return (
    <Card className={`transition-all hover:shadow-lg ${highlight ? 'border-yellow-400 bg-gradient-to-br from-yellow-50 to-orange-50' : ''}`}>
      <CardContent className="p-6 text-center">
        <div className={`w-12 h-12 mx-auto mb-4 rounded-full flex items-center justify-center ${
          highlight ? 'bg-yellow-100' : 'bg-blue-100'
        }`}>
          {icon}
        </div>
        <h3 className="text-lg font-semibold mb-2">{title}</h3>
        <p className="text-gray-600 text-sm">{description}</p>
        {highlight && (
          <Badge className="mt-2 bg-yellow-400 text-yellow-900">
            <Crown className="w-3 h-3 mr-1" />
            Premium
          </Badge>
        )}
      </CardContent>
    </Card>
  );
}

function HeroSection({ onGetStarted, onAdminAccess, audioManager }: HeroSectionProps): JSX.Element {
  const [isMuted, setIsMuted] = useState(false);

  useEffect(() => {
    const settings = audioManager.getSettings();
    setIsMuted(settings.isMuted);
  }, [audioManager]);

  const toggleAudio = async () => {
    await audioManager.initializeOnUserGesture();
    const newMuted = !isMuted;
    audioManager.setMuted(newMuted);
    setIsMuted(newMuted);
    
    if (!newMuted) {
      audioManager.playButtonClick();
      audioManager.startBackgroundMusic();
    }
  };

  const handleGetStarted = async () => {
    await audioManager.initializeOnUserGesture();
    audioManager.playButtonClick();
    onGetStarted();
  };

  const handleAdminAccess = () => {
    audioManager.playButtonClick();
    onAdminAccess();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-900 via-blue-900 to-purple-900 text-white">
      {/* Header */}
      <header className="p-6">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center">
              <Trophy className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">Pool Tournament</h1>
              <p className="text-green-300 text-sm">Real Money â€¢ Instant Wins</p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={toggleAudio}>
              {isMuted ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
            </Button>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleAdminAccess}
              className="flex items-center gap-2"
            >
              <Shield className="w-4 h-4" />
              Admin
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Content */}
      <main className="max-w-7xl mx-auto px-6 pb-12">
        <div className="text-center mb-16">
          <div className="mb-8">
            <h2 className="text-6xl font-bold bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent mb-4">
              Win Real Money
            </h2>
            <p className="text-2xl text-gray-300 mb-6">
              Play 8-Ball Pool â€¢ 60-Second Matches â€¢ Instant Payouts
            </p>
            <div className="flex justify-center gap-4 text-sm">
              <Badge variant="secondary" className="bg-green-600/20 text-green-300 border-green-500">
                <Zap className="w-3 h-3 mr-1" />
                â‚¹10 Entry Fee
              </Badge>
              <Badge variant="secondary" className="bg-yellow-600/20 text-yellow-300 border-yellow-500">
                <Trophy className="w-3 h-3 mr-1" />
                â‚¹16 Winner Prize
              </Badge>
              <Badge variant="secondary" className="bg-blue-600/20 text-blue-300 border-blue-500">
                <Timer className="w-3 h-3 mr-1" />
                60 Second Matches
              </Badge>
            </div>
          </div>

          <Alert className="max-w-2xl mx-auto mb-8 bg-yellow-900/20 border-yellow-600 text-yellow-100">
            <Star className="h-4 w-4" />
            <AlertTitle>ðŸŽ‰ Welcome Bonus Available!</AlertTitle>
            <AlertDescription>
              Get â‚¹100 free when you sign up. Start playing immediately with no deposit required.
            </AlertDescription>
          </Alert>

          <Button 
            onClick={handleGetStarted}
            size="lg" 
            className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-xl px-12 py-6 rounded-full shadow-2xl transform transition-all hover:scale-105"
          >
            <Trophy className="w-6 h-6 mr-3" />
            Start Playing Now
          </Button>

          <p className="text-gray-400 text-sm mt-4">
            ðŸ‡®ðŸ‡³ Made for India â€¢ UPI Payments â€¢ Instant Withdrawals
          </p>
        </div>

        {/* Features Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
          <FeatureCard
            icon={<Timer className="w-6 h-6 text-orange-600" />}
            title="60-Second Matches"
            description="Quick, intense pool games with real money prizes"
            highlight
          />
          <FeatureCard
            icon={<Trophy className="w-6 h-6 text-blue-600" />}
            title="Instant Payouts"
            description="Win â‚¹16 instantly, paid directly to your wallet"
          />
          <FeatureCard
            icon={<Shield className="w-6 h-6 text-green-600" />}
            title="Secure Platform"
            description="OTP verification, encrypted transactions, fair play"
          />
          <FeatureCard
            icon={<Users className="w-6 h-6 text-purple-600" />}
            title="1v1 Tournaments"
            description="Face-off against real players in skill-based matches"
          />
        </div>

        {/* Stats Section */}
        <div className="bg-black/20 rounded-2xl p-8 mb-16">
          <h3 className="text-3xl font-bold text-center mb-8">Live Tournament Stats</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            <div>
              <p className="text-4xl font-bold text-green-400">â‚¹12,450</p>
              <p className="text-gray-400">Total Winnings Today</p>
            </div>
            <div>
              <p className="text-4xl font-bold text-blue-400">127</p>
              <p className="text-gray-400">Active Players</p>
            </div>
            <div>
              <p className="text-4xl font-bold text-yellow-400">45s</p>
              <p className="text-gray-400">Avg Match Time</p>
            </div>
          </div>
        </div>

        {/* How to Play */}
        <div className="text-center">
          <h3 className="text-3xl font-bold mb-8">How to Win Money</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[
              {
                step: "1",
                title: "Sign Up & Get â‚¹100 Free",
                description: "Register with phone/email, verify OTP, get welcome bonus"
              },
              {
                step: "2", 
                title: "Join a Match (â‚¹10)",
                description: "Enter a 1v1 tournament, 60-second pool game starts"
              },
              {
                step: "3",
                title: "Win & Earn â‚¹16",
                description: "Pocket more balls than opponent, get instant payout"
              }
            ].map((item) => (
              <div key={item.step} className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 text-2xl font-bold">
                  {item.step}
                </div>
                <h4 className="text-xl font-semibold mb-2">{item.title}</h4>
                <p className="text-gray-400">{item.description}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Footer */}
        <footer className="mt-16 pt-8 border-t border-gray-700 text-center text-gray-400">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 text-sm">
            <div>
              <p className="font-semibold text-white mb-2">Platform</p>
              <p>Secure Gaming</p>
              <p>Fair Play</p>
              <p>24/7 Support</p>
            </div>
            <div>
              <p className="font-semibold text-white mb-2">Payments</p>
              <p>UPI Instant</p>
              <p>Bank Transfer</p>
              <p>Digital Wallets</p>
            </div>
            <div>
              <p className="font-semibold text-white mb-2">Features</p>
              <p>Real-time Matches</p>
              <p>Mobile Optimized</p>
              <p>Tournament Mode</p>
            </div>
            <div>
              <p className="font-semibold text-white mb-2">Support</p>
              <p>Live Chat</p>
              <p>Help Center</p>
              <p>Contact Us</p>
            </div>
          </div>
          <div className="text-xs">
            <p>Â© 2024 Pool Tournament Platform. Licensed gaming platform for India.</p>
            <p className="mt-2">Play responsibly. Age 18+. Terms & Conditions apply.</p>
          </div>
        </footer>
      </main>
    </div>
  );
}

export function TournamentApp({}: TournamentAppProps): JSX.Element {
  const [currentView, setCurrentView] = useState<'landing' | 'auth' | 'dashboard' | 'admin' | 'game'>('landing');
  const [user, setUser] = useState<User | null>(null);
  const [showWalletManager, setShowWalletManager] = useState<boolean>(false);
  const [gameMatchId, setGameMatchId] = useState<string | undefined>();

  const audioManager = AudioManager.getInstance();
  const tournamentManager = TournamentManager.getInstance();

  useEffect(() => {
    // Check for existing user session
    const savedUserId = localStorage.getItem('current_user_id');
    if (savedUserId) {
      const savedUser = tournamentManager.getUserById(savedUserId);
      if (savedUser) {
        setUser(savedUser);
        setCurrentView('dashboard');
      }
    }
  }, []);

  useEffect(() => {
    if (user) {
      localStorage.setItem('current_user_id', user.id);
    } else {
      localStorage.removeItem('current_user_id');
    }
  }, [user]);

  const handleAuthenticated = (authenticatedUser: User) => {
    setUser(authenticatedUser);
    setCurrentView('dashboard');
    audioManager.playNotification();
    audioManager.startBackgroundMusic();
  };

  const handlePlayMatch = (matchId?: string) => {
    if (matchId) {
      setGameMatchId(matchId);
    }
    setCurrentView('game');
    audioManager.playMatchStart();
  };

  const handleReturnToDashboard = () => {
    setCurrentView('dashboard');
    setGameMatchId(undefined);
    audioManager.playButtonClick();
  };

  const handleShowWalletHistory = () => {
    setShowWalletManager(true);
    audioManager.playButtonClick();
  };

  const handleUserUpdate = (updatedUser: User) => {
    setUser(updatedUser);
  };

  const handleLogout = () => {
    setUser(null);
    setCurrentView('landing');
    localStorage.removeItem('current_user_id');
    audioManager.playButtonClick();
    audioManager.stopBackgroundMusic();
  };

  return (
    <div className="min-h-screen">
      {/* Landing Page */}
      {currentView === 'landing' && (
        <HeroSection
          onGetStarted={() => setCurrentView('auth')}
          onAdminAccess={() => setCurrentView('admin')}
          audioManager={audioManager}
        />
      )}

      {/* Authentication Modal */}
      {currentView === 'auth' && (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <AuthModal
            isOpen={true}
            onClose={() => setCurrentView('landing')}
            onAuthenticated={handleAuthenticated}
          />
        </div>
      )}

      {/* Tournament Dashboard */}
      {currentView === 'dashboard' && user && (
        <div className="relative">
          <TournamentDashboard
            user={user}
            onPlayMatch={handlePlayMatch}
            onShowWalletHistory={handleShowWalletHistory}
          />
          
          {/* Floating Action Buttons */}
          <div className="fixed bottom-6 right-6 flex flex-col gap-3 z-50">
            <Button
              onClick={handleLogout}
              variant="secondary"
              size="sm"
              className="shadow-lg"
            >
              Logout
            </Button>
            <Button
              onClick={() => setCurrentView('admin')}
              variant="secondary"
              size="sm"
              className="shadow-lg"
            >
              <Shield className="w-4 h-4" />
            </Button>
          </div>
        </div>
      )}

      {/* Admin Dashboard */}
      {currentView === 'admin' && (
        <AdminDashboard
          onClose={() => setCurrentView(user ? 'dashboard' : 'landing')}
        />
      )}

      {/* Pool Game */}
      {currentView === 'game' && (
        <div className="relative min-h-screen">
          <PoolGame 
            matchId={gameMatchId}
            onExitMatch={handleReturnToDashboard}
            audioManager={audioManager}
          />
          
          {/* Game UI Overlay */}
          <div className="fixed top-4 left-4 z-50">
            <Button
              onClick={handleReturnToDashboard}
              variant="secondary"
              size="sm"
              className="shadow-lg"
            >
              Exit Match
            </Button>
          </div>
          
          {gameMatchId && (
            <div className="fixed top-4 right-4 z-50">
              <Card className="p-3">
                <div className="flex items-center gap-2 text-sm">
                  <Target className="w-4 h-4 text-green-600" />
                  <span>Tournament Match</span>
                  <Badge variant="outline">{gameMatchId.slice(0, 8)}</Badge>
                </div>
              </Card>
            </div>
          )}
        </div>
      )}

      {/* Wallet Manager Modal */}
      {showWalletManager && user && (
        <WalletManager
          isOpen={showWalletManager}
          onClose={() => setShowWalletManager(false)}
          user={user}
          onUserUpdate={handleUserUpdate}
        />
      )}
    </div>
  );
}